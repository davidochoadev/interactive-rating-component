<voting-card class="relative max-w-[443px]">
   <div class="p-6 rounded-xl bg-[radial-gradient(circle_at_top,_var(--tw-gradient-stops))] from-[#222933] to-[#171e28] flex flex-col" id="voting-card">
      <div class="p-3 bg-darkBlue w-max rounded-full">
         <img src="./icon-star.svg" alt="">
      </div>
      <h2 class="text-white text-3xl py-6">How did we do?</h2>
      <p class="text-lightGray">
         Please let us know how we did with your support request. All feedback is appreciated 
         to help us improve our offering!
      </p>
      <form novalidate>
         <div class="flex flex-row gap-4 self-center py-6 justify-center flex-wrap space-x-2">
            <button class="py-4 px-6 text-lightGray bg-darkBlue rounded-full hover:bg-orange hover:text-white">
               <p>1</p>
            </button>
            <button class="py-4 px-6 text-lightGray bg-darkBlue rounded-full hover:bg-orange hover:text-white">
               <p>2</p>
            </button>
            <button class="py-4 px-6 text-lightGray bg-darkBlue rounded-full hover:bg-orange hover:text-white">
               <p>3</p>
            </button>
            <button class="py-4 px-6 text-lightGray bg-darkBlue rounded-full hover:bg-orange hover:text-white">
               <p>4</p>
            </button>
            <button class="py-4 px-6 text-lightGray bg-darkBlue rounded-full hover:bg-orange hover:text-white">
               <p>5</p>
            </button>
            <input type="text" class="hidden" name="vote" id="vote-value" value="">
         </div>
         <button type="submit" class="uppercase text-white py-3 w-full bg-orange rounded-full tracking-widest" id="submit-btn">
            submit
         </button>
      </form>
   </div>

   <div class="absolute top-0 left-0 p-6 rounded-xl bg-[radial-gradient(circle_at_top,_var(--tw-gradient-stops))] from-[#222933] to-[#171e28] flex flex-col invisible" id="thanks-card">
      <div class="p-3 w-full rounded-full self-center">
         <img src="./illustration-thank-you.svg" alt="" class="mx-auto">
      </div>
      <span class="p-2 text-orange bg-darkBlue w-max rounded-full mx-auto my-3">
         <p id="result">You selected 4 out 5</p>
      </span>
      <h2 class="text-white text-3xl py-6 text-center">Thank you!</h2>
      <p class="text-lightGray text-center">
         We appreciate you taking the time to give a rating. If you ever need more support, don't hesitate to get in touch!
      </p>
   </div>
</voting-card>

<script>
   // Define the behaviour for our new type of HTML element.
   class VotingCard extends HTMLElement {
     constructor() {
       super();
       const form = this.querySelector('form');
       const vote = this.querySelectorAll('button:not([type="submit"])');
       const currentVote = this.querySelector('#vote-value') as HTMLInputElement;
       const submitBtn = this.querySelector('#submit-btn');
       const card = this.querySelector('#voting-card');
       const thankYouCard = this.querySelector('#thanks-card');
       const result = this.querySelector('#result');

       vote!.forEach(button => {
            const countVote = button.querySelector('p');
            button.addEventListener('click', () => {
               vote!.forEach(otherButton => {
                  if (otherButton !== button) {
                  otherButton.classList.remove('bg-orange', 'text-white');
                  }
               });
               button.classList.add('bg-orange', 'text-white');
               let selectedVote : string = countVote?.innerText.toString() || "";
               currentVote!.value = selectedVote || "";
               console.log("Vote selected is: ",selectedVote);
            });
         });
      
      submitBtn?.addEventListener('click', event => {
         event.preventDefault();
         const res = `You selected ${currentVote?.value} of 5`

         switch (currentVote!.value) {
            case "":
               console.log("Please select a Vote!");
               break;
            case "1":
               console.log("vote 1 is selected", result?.innerHTML);
               result!.textContent = res;
               break;
            case "2":
               console.log("vote 2 is selected");
               result!.textContent = res;
               break;
            case "3":
               console.log("vote 3 is selected");
               result!.textContent = res;
               break;
            case "4":
               console.log("vote 4 is selected");
               result!.textContent = res;
               break;
            case "5":
               console.log("vote 5 is selected");
               result!.textContent = res;
               break;
         }

         if(currentVote.value === "") {
            console.log("Please Select a Vote!");
         } else {
            thankYouCard?.classList.remove("invisible");
            console.log("The current vote is: ",currentVote.value);
         }
         /* card?.classList.add("hidden"); */
      })

       form?.addEventListener('submit', event => {
         event.preventDefault();
         console.log("Vote placed inside the input: ",currentVote.value);
       });

     }
   }
 
   // Tell the browser to use our AstroHeart class for <astro-heart> elements.
   customElements.define('voting-card', VotingCard);
 </script>