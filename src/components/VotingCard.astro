<voting-card class="p-6 rounded-xl bg-[radial-gradient(circle_at_top,_var(--tw-gradient-stops))] from-[#222933] to-[#171e28] flex flex-col">
   <div class="p-3 bg-darkBlue w-max rounded-full">
      <img src="./icon-star.svg" alt="">
   </div>
   <h2 class="text-white text-3xl py-6">How did we do</h2>
   <p class="text-lightGray">
      Please let us know how we did with your support request. All feedback is appreciated 
		to help us improve our offering!
   </p>
   <div class="flex flex-row gap-4 self-center py-6">
      <button class="py-2 px-4 text-lightGray bg-darkBlue rounded-full hover:bg-orange hover:text-white">
         <p>1</p>
      </button>
      <button class="py-2 px-4 text-lightGray bg-darkBlue rounded-full hover:bg-orange hover:text-white">
         <p>2</p>
      </button>
      <button class="py-2 px-4 text-lightGray bg-darkBlue rounded-full hover:bg-orange hover:text-white">
         <p>3</p>
      </button>
      <button class="py-2 px-4 text-lightGray bg-darkBlue rounded-full hover:bg-orange hover:text-white">
         <p>4</p>
      </button>
      <button class="py-2 px-4 text-lightGray bg-darkBlue rounded-full hover:bg-orange hover:text-white">
         <p>5</p>
      </button>
   </div>
   <button class="uppercase text-white py-3 w-full bg-orange rounded-full tracking-widest">
      submit
   </button>
</voting-card>

<script>
   // Define the behaviour for our new type of HTML element.
   class VotingCard extends HTMLElement {
     constructor() {
       super();
       let count = 0;
 
       const vote = this.querySelector('button');
       const countVote = vote!.querySelector('p');
 
       // Each time the button is clicked, update the count.
       vote!.addEventListener('click', () => {
         let currentVote = countVote?.innerText.toString();
         console.log(currentVote);
       });
     }
   }
 
   // Tell the browser to use our AstroHeart class for <astro-heart> elements.
   customElements.define('voting-card', VotingCard);
 </script>